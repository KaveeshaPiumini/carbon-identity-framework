-- ------------------------------------------
-- Procedure to restore the data from backup tables to the original tables deleted by WSO2_NON_PERSISTENCE_ACCESS_TOKEN_CLEANUP_SP.
-- !!! Note: Use this procedure only if you are using non-persistent access tokens.
-- ------------------------------------------

DROP PROCEDURE IF EXISTS `WSO2_NON_PERSISTENCE_ACCESS_TOKEN_DATA_RESTORE_SP`;
DELIMITER $$
CREATE PROCEDURE `WSO2_NON_PERSISTENCE_ACCESS_TOKEN_DATA_RESTORE_SP`()

BEGIN

DECLARE rowCount INT;
DECLARE enableLog BOOLEAN;
DECLARE logLevel VARCHAR(10);

-- ------------------------------------------
-- CONFIGURABLE ATTRIBUTES
-- ------------------------------------------
SET enableLog = TRUE; -- ENABLE LOGGING [DEFAULT : TRUE]
SET logLevel := 'TRACE'; -- SET LOG LEVELS : TRACE



IF (enableLog) THEN
SELECT  'NON_PERSISTENCE_ACCESS_TOKEN CLEANUP DATA RESTORATION STARTED .... !';
END IF;


-- ---------------------

SELECT COUNT(1) INTO rowcount  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (SELECT DATABASE())  AND TABLE_NAME IN ('IDN_OAUTH2_REFRESH_TOKEN');
IF (rowcount = 1)
THEN
IF (enableLog AND logLevel IN ('TRACE')) THEN
SELECT  'CLEANUP DATA RESTORATION STARTED ON IDN_OAUTH2_REFRESH_TOKEN TABLE !';
END IF;
INSERT INTO IDN_OAUTH2_REFRESH_TOKEN SELECT A.* FROM BAK_IDN_OAUTH2_REFRESH_TOKEN A LEFT JOIN IDN_OAUTH2_REFRESH_TOKEN B ON A.REFRESH_TOKEN_ID = B.REFRESH_TOKEN_ID WHERE B.REFRESH_TOKEN_ID IS NULL;
SELECT row_count() INTO rowcount;
IF (enableLog ) THEN
SELECT  'CLEANUP DATA RESTORATION COMPLETED ON IDN_OAUTH2_REFRESH_TOKEN WITH %',rowcount;
END IF;
END IF;

-- ---------------------

SELECT COUNT(1) INTO rowcount  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (SELECT DATABASE()) AND TABLE_NAME IN ('IDN_OAUTH2_REFRESH_TOKEN_SCOPE');
IF (rowcount = 1)
THEN
IF (enableLog AND logLevel IN ('TRACE')) THEN
SELECT  'CLEANUP DATA RESTORATION STARTED ON IDN_OAUTH2_REFRESH_TOKEN_SCOPE TABLE !';
END IF;
INSERT INTO IDN_OAUTH2_REFRESH_TOKEN_SCOPE SELECT A.* FROM BAK_IDN_OAUTH2_REFRESH_TOKEN_SCOPE A LEFT JOIN IDN_OAUTH2_REFRESH_TOKEN_SCOPE B ON A.REFRESH_TOKEN_ID = B.REFRESH_TOKEN_ID AND A.TOKEN_SCOPE = B.TOKEN_SCOPE WHERE B.REFRESH_TOKEN_ID IS NULL;
SELECT row_count() INTO rowcount;
IF (enableLog ) THEN
SELECT  'CLEANUP DATA RESTORATION COMPLETED ON IDN_OAUTH2_REFRESH_TOKEN_SCOPE WITH %',rowcount;
END IF;
END IF;

-- ---------------------

SELECT COUNT(1) INTO rowcount  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (SELECT DATABASE())  AND TABLE_NAME IN ('IDN_OAUTH2_REVOKED_TOKENS');
IF (rowcount = 1)
THEN
IF (enableLog AND logLevel IN ('TRACE')) THEN
SELECT  'CLEANUP DATA RESTORATION STARTED ON IDN_OAUTH2_REVOKED_TOKENS TABLE !';
END IF;
INSERT INTO IDN_OAUTH2_REVOKED_TOKENS SELECT A.* FROM BAK_IDN_OAUTH2_REVOKED_TOKENS A LEFT JOIN IDN_OAUTH2_REVOKED_TOKENS B ON A.UUID = B.UUID WHERE B.UUID IS NULL;
SELECT row_count() INTO rowcount;
IF (enableLog ) THEN
SELECT  'CLEANUP DATA RESTORATION COMPLETED ON IDN_OAUTH2_REVOKED_TOKENS WITH %',rowcount;
END IF;
END IF;

-- ---------------------

SELECT COUNT(1) INTO rowcount  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (SELECT DATABASE())  AND TABLE_NAME IN ('IDN_SUBJECT_ENTITY_REVOKED_EVENT');
IF (rowcount = 1)
THEN
IF (enableLog AND logLevel IN ('TRACE')) THEN
SELECT  'CLEANUP DATA RESTORATION STARTED ON IDN_SUBJECT_ENTITY_REVOKED_EVENT TABLE !';
END IF;
INSERT INTO IDN_SUBJECT_ENTITY_REVOKED_EVENT SELECT A.* FROM BAK_IDN_SUBJECT_ENTITY_REVOKED_EVENT A LEFT JOIN IDN_SUBJECT_ENTITY_REVOKED_EVENT B ON A.EVENT_ID = B.EVENT_ID WHERE B.EVENT_ID IS NULL;
SELECT row_count() INTO rowcount;
IF (enableLog ) THEN
SELECT  'CLEANUP DATA RESTORATION COMPLETED ON IDN_SUBJECT_ENTITY_REVOKED_EVENT WITH %',rowcount;
END IF;
END IF;

IF (enableLog) THEN
SELECT  'NON_PERSISTENCE_ACCESS_TOKEN CLEANUP DATA RESTORATION COMPLETED .... !';
END IF;


END$$

DELIMITER ;
